CCS PCM C Compiler, Version 5.025, 11345               24-feb.-21 11:48

               Filename:   C:\Users\E531\Desktop\Picc\Programa Diego\ccompiler\secuencias.lst

               ROM used:   310 words (4%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           9 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F4
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, BROWNOUT, NOLVP 
.................... #use delay (clock = 4000000) 
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... #byte trisb = 0x86 
.................... #byte portb = 0x06 
....................  
.................... int tiempo = 1000; 
.................... int i = 0; 
....................  
.................... void secuencia_1() 
.................... { 
....................    output_b(0b01010101); 
0019:  BSF    03.5
001A:  CLRF   06
001B:  MOVLW  55
001C:  BCF    03.5
001D:  MOVWF  06
....................    delay_ms(tiempo); 
001E:  MOVF   20,W
001F:  MOVWF  23
0020:  CALL   004
....................    output_b(0b10101010); 
0021:  BSF    03.5
0022:  CLRF   06
0023:  MOVLW  AA
0024:  BCF    03.5
0025:  MOVWF  06
....................    delay_ms(tiempo); 
0026:  MOVF   20,W
0027:  MOVWF  23
0028:  CALL   004
0029:  BCF    0A.3
002A:  BCF    0A.4
002B:  GOTO   110 (RETURN)
.................... } 
.................... //------------------------------------ 
.................... void secuencia_2() 
.................... { 
....................    output_b(0b00000000); 
002C:  BSF    03.5
002D:  CLRF   06
002E:  BCF    03.5
002F:  CLRF   06
....................    delay_ms(tiempo); 
0030:  MOVF   20,W
0031:  MOVWF  23
0032:  CALL   004
....................    output_b(0b11111111); 
0033:  BSF    03.5
0034:  CLRF   06
0035:  MOVLW  FF
0036:  BCF    03.5
0037:  MOVWF  06
....................    delay_ms(tiempo); 
0038:  MOVF   20,W
0039:  MOVWF  23
003A:  CALL   004
003B:  BCF    0A.3
003C:  BCF    0A.4
003D:  GOTO   118 (RETURN)
.................... } 
....................  
.................... ///------------------------------- 
.................... void secuencia_3() 
.................... {  
....................    output_b(0b10000001); 
003E:  BSF    03.5
003F:  CLRF   06
0040:  MOVLW  81
0041:  BCF    03.5
0042:  MOVWF  06
....................    delay_ms(tiempo); 
0043:  MOVF   20,W
0044:  MOVWF  23
0045:  CALL   004
....................    output_b(0b11000011); 
0046:  BSF    03.5
0047:  CLRF   06
0048:  MOVLW  C3
0049:  BCF    03.5
004A:  MOVWF  06
....................    delay_ms(tiempo); 
004B:  MOVF   20,W
004C:  MOVWF  23
004D:  CALL   004
....................    output_b(0b11100111); 
004E:  BSF    03.5
004F:  CLRF   06
0050:  MOVLW  E7
0051:  BCF    03.5
0052:  MOVWF  06
....................    delay_ms(tiempo); 
0053:  MOVF   20,W
0054:  MOVWF  23
0055:  CALL   004
....................    output_b(0b11111111); 
0056:  BSF    03.5
0057:  CLRF   06
0058:  MOVLW  FF
0059:  BCF    03.5
005A:  MOVWF  06
....................    delay_ms(tiempo); 
005B:  MOVF   20,W
005C:  MOVWF  23
005D:  CALL   004
....................    output_b(0b11100111); 
005E:  BSF    03.5
005F:  CLRF   06
0060:  MOVLW  E7
0061:  BCF    03.5
0062:  MOVWF  06
....................    delay_ms(tiempo); 
0063:  MOVF   20,W
0064:  MOVWF  23
0065:  CALL   004
....................    output_b(0b11000011); 
0066:  BSF    03.5
0067:  CLRF   06
0068:  MOVLW  C3
0069:  BCF    03.5
006A:  MOVWF  06
....................    delay_ms(tiempo); 
006B:  MOVF   20,W
006C:  MOVWF  23
006D:  CALL   004
....................    output_b(0b10000001); 
006E:  BSF    03.5
006F:  CLRF   06
0070:  MOVLW  81
0071:  BCF    03.5
0072:  MOVWF  06
....................    delay_ms(tiempo); 
0073:  MOVF   20,W
0074:  MOVWF  23
0075:  CALL   004
0076:  BCF    0A.3
0077:  BCF    0A.4
0078:  GOTO   120 (RETURN)
.................... } 
.................... //---------------------------------- 
.................... void secuencia_4() 
.................... { 
....................    output_b(0b10000000); 
0079:  BSF    03.5
007A:  CLRF   06
007B:  MOVLW  80
007C:  BCF    03.5
007D:  MOVWF  06
....................    delay_ms(tiempo); 
007E:  MOVF   20,W
007F:  MOVWF  23
0080:  CALL   004
....................    output_b(0b01000000); 
0081:  BSF    03.5
0082:  CLRF   06
0083:  MOVLW  40
0084:  BCF    03.5
0085:  MOVWF  06
....................    delay_ms(tiempo); 
0086:  MOVF   20,W
0087:  MOVWF  23
0088:  CALL   004
....................    output_b(0b00100000); 
0089:  BSF    03.5
008A:  CLRF   06
008B:  MOVLW  20
008C:  BCF    03.5
008D:  MOVWF  06
....................    delay_ms(tiempo); 
008E:  MOVF   20,W
008F:  MOVWF  23
0090:  CALL   004
....................    output_b(0b00010000); 
0091:  BSF    03.5
0092:  CLRF   06
0093:  MOVLW  10
0094:  BCF    03.5
0095:  MOVWF  06
....................    delay_ms(tiempo); 
0096:  MOVF   20,W
0097:  MOVWF  23
0098:  CALL   004
....................    output_b(0b00001000); 
0099:  BSF    03.5
009A:  CLRF   06
009B:  MOVLW  08
009C:  BCF    03.5
009D:  MOVWF  06
....................    delay_ms(tiempo); 
009E:  MOVF   20,W
009F:  MOVWF  23
00A0:  CALL   004
....................    output_b(0b00000100); 
00A1:  BSF    03.5
00A2:  CLRF   06
00A3:  MOVLW  04
00A4:  BCF    03.5
00A5:  MOVWF  06
....................    delay_ms(tiempo); 
00A6:  MOVF   20,W
00A7:  MOVWF  23
00A8:  CALL   004
....................    output_b(0b00000010); 
00A9:  BSF    03.5
00AA:  CLRF   06
00AB:  MOVLW  02
00AC:  BCF    03.5
00AD:  MOVWF  06
....................    delay_ms(tiempo); 
00AE:  MOVF   20,W
00AF:  MOVWF  23
00B0:  CALL   004
....................    output_b(0b00000001); 
00B1:  BSF    03.5
00B2:  CLRF   06
00B3:  MOVLW  01
00B4:  BCF    03.5
00B5:  MOVWF  06
....................    delay_ms(tiempo); 
00B6:  MOVF   20,W
00B7:  MOVWF  23
00B8:  CALL   004
....................    output_b(0b00000010); 
00B9:  BSF    03.5
00BA:  CLRF   06
00BB:  MOVLW  02
00BC:  BCF    03.5
00BD:  MOVWF  06
....................    delay_ms(tiempo); 
00BE:  MOVF   20,W
00BF:  MOVWF  23
00C0:  CALL   004
....................    output_b(0b00000100); 
00C1:  BSF    03.5
00C2:  CLRF   06
00C3:  MOVLW  04
00C4:  BCF    03.5
00C5:  MOVWF  06
....................    delay_ms(tiempo); 
00C6:  MOVF   20,W
00C7:  MOVWF  23
00C8:  CALL   004
....................    output_b(0b00001000); 
00C9:  BSF    03.5
00CA:  CLRF   06
00CB:  MOVLW  08
00CC:  BCF    03.5
00CD:  MOVWF  06
....................    delay_ms(tiempo); 
00CE:  MOVF   20,W
00CF:  MOVWF  23
00D0:  CALL   004
....................    output_b(0b00010000); 
00D1:  BSF    03.5
00D2:  CLRF   06
00D3:  MOVLW  10
00D4:  BCF    03.5
00D5:  MOVWF  06
....................    delay_ms(tiempo); 
00D6:  MOVF   20,W
00D7:  MOVWF  23
00D8:  CALL   004
....................    output_b(0b00100000); 
00D9:  BSF    03.5
00DA:  CLRF   06
00DB:  MOVLW  20
00DC:  BCF    03.5
00DD:  MOVWF  06
....................    delay_ms(tiempo); 
00DE:  MOVF   20,W
00DF:  MOVWF  23
00E0:  CALL   004
....................    output_b(0b01000000); 
00E1:  BSF    03.5
00E2:  CLRF   06
00E3:  MOVLW  40
00E4:  BCF    03.5
00E5:  MOVWF  06
....................    delay_ms(tiempo); 
00E6:  MOVF   20,W
00E7:  MOVWF  23
00E8:  CALL   004
....................    output_b(0b10000000); 
00E9:  BSF    03.5
00EA:  CLRF   06
00EB:  MOVLW  80
00EC:  BCF    03.5
00ED:  MOVWF  06
....................    delay_ms(tiempo); 
00EE:  MOVF   20,W
00EF:  MOVWF  23
00F0:  CALL   004
00F1:  BCF    0A.3
00F2:  BCF    0A.4
00F3:  GOTO   128 (RETURN)
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... void main() 
00F4:  MOVF   03,W
00F5:  ANDLW  1F
00F6:  MOVWF  03
00F7:  MOVLW  E8
00F8:  MOVWF  20
00F9:  CLRF   21
00FA:  BSF    03.5
00FB:  BSF    1F.0
00FC:  BSF    1F.1
00FD:  BSF    1F.2
00FE:  BCF    1F.3
00FF:  MOVLW  07
0100:  MOVWF  1C
0101:  BCF    03.7
.................... { 
....................    bit_clear (trisb,0); 
0102:  BCF    06.0
....................    bit_clear (portb,0); 
0103:  BCF    03.5
0104:  BCF    06.0
....................     
....................    while(true) 
....................    {    
....................       for(i=0; i<5; i++) 
0105:  CLRF   21
0106:  MOVF   21,W
0107:  SUBLW  04
0108:  BTFSS  03.0
0109:  GOTO   134
....................       {       
....................          for(i=0; i<3; i++) 
010A:  CLRF   21
010B:  MOVF   21,W
010C:  SUBLW  02
010D:  BTFSS  03.0
010E:  GOTO   112
....................          { 
....................          secuencia_1(); 
010F:  GOTO   019
0110:  INCF   21,F
0111:  GOTO   10B
....................          } 
....................          for(i=0; i<3; i++) 
0112:  CLRF   21
0113:  MOVF   21,W
0114:  SUBLW  02
0115:  BTFSS  03.0
0116:  GOTO   11A
....................          { 
....................          secuencia_2(); 
0117:  GOTO   02C
0118:  INCF   21,F
0119:  GOTO   113
....................          } 
....................          for(i=0; i<3; i++) 
011A:  CLRF   21
011B:  MOVF   21,W
011C:  SUBLW  02
011D:  BTFSS  03.0
011E:  GOTO   122
....................          { 
....................          secuencia_3(); 
011F:  GOTO   03E
0120:  INCF   21,F
0121:  GOTO   11B
....................          } 
....................          for(i=0; i<3; i++) 
0122:  CLRF   21
0123:  MOVF   21,W
0124:  SUBLW  02
0125:  BTFSS  03.0
0126:  GOTO   12A
....................          { 
....................          secuencia_4(); 
0127:  GOTO   079
0128:  INCF   21,F
0129:  GOTO   123
....................          } 
....................     bit_clear (portb,0); 
012A:  BCF    06.0
....................     delay_ms(5000);     
012B:  MOVLW  14
012C:  MOVWF  22
012D:  MOVLW  FA
012E:  MOVWF  23
012F:  CALL   004
0130:  DECFSZ 22,F
0131:  GOTO   12D
0132:  INCF   21,F
0133:  GOTO   106
....................    } 
0134:  GOTO   105
....................  
.................... } 
.................... } 
0135:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
